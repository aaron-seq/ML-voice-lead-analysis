# Pre-commit hooks configuration for ML Voice Lead Analysis
# Ensures code quality and consistency across the project

repos:
  # Python code formatting and linting
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        name: Format Python code with Black
        files: ^backend/.*\.py$
        language_version: python3.11
  
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        name: Sort Python imports with isort
        files: ^backend/.*\.py$
        args: ["--profile", "black", "--line-length", "88"]
  
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        name: Lint Python code with flake8
        files: ^backend/.*\.py$
        args: ["--max-line-length=88", "--extend-ignore=E203,W503"]
  
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        name: Type check Python code with mypy
        files: ^backend/.*\.py$
        args: ["--ignore-missing-imports", "--strict-optional"]
        additional_dependencies: [types-requests, types-redis]
  
  # JavaScript/TypeScript formatting and linting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        name: Format frontend code with Prettier
        files: ^frontend/.*\.(js|jsx|ts|tsx|json|css|md)$
        args: ["--write"]
  
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.54.0
    hooks:
      - id: eslint
        name: Lint frontend code with ESLint
        files: ^frontend/.*\.(js|jsx|ts|tsx)$
        args: ["--fix"]
        additional_dependencies:
          - eslint@8.54.0
          - '@typescript-eslint/eslint-plugin@6.12.0'
          - '@typescript-eslint/parser@6.12.0'
          - eslint-config-next@14.0.4
  
  # General code quality
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        name: Remove trailing whitespace
      - id: end-of-file-fixer
        name: Ensure files end with newline
      - id: check-yaml
        name: Validate YAML files
      - id: check-json
        name: Validate JSON files
      - id: check-toml
        name: Validate TOML files
      - id: check-xml
        name: Validate XML files
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: check-added-large-files
        name: Check for large files
        args: ['--maxkb=1000']
      - id: detect-private-key
        name: Detect private keys
  
  # Docker and infrastructure
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: Lint Dockerfiles with hadolint
  
  # Security scanning
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: Security linting with bandit
        files: ^backend/.*\.py$
        args: ["-r", "backend/", "-x", "backend/tests/"]
  
  # Dependency security scanning
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        name: Check Python dependencies for security vulnerabilities
        files: ^backend/requirements.*\.txt$
  
  # Documentation
  - repo: https://github.com/pycqa/docformatter
    rev: v1.7.5
    hooks:
      - id: docformatter
        name: Format Python docstrings
        files: ^backend/.*\.py$
        args: ["--in-place", "--wrap-summaries=88", "--wrap-descriptions=88"]

# Configuration
ci:
  autofix_commit_msg: 'style: auto-fix pre-commit hooks'
  autofix_prs: true
  autoupdate_commit_msg: 'chore: update pre-commit hooks'
  autoupdate_schedule: weekly
  skip: []
  submodules: false