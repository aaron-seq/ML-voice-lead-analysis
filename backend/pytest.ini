[tool:pytest]
# Test discovery
python_files = test_*.py *_test.py tests.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = tests

# Minimum version
minversion = 7.0

# Async support
asyncio_mode = auto

# Output configuration
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --cov=.
    --cov-branch
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --junitxml=reports/junit.xml

# Test markers
markers =
    unit: Unit tests
    integration: Integration tests
    slow: Slow running tests
    aws: Tests requiring AWS services
    ml: Machine learning pipeline tests
    api: API endpoint tests
    database: Database-related tests
    performance: Performance benchmark tests

# Filters and warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning
    ignore:.*The 'app' shortcut is now deprecated.*:DeprecationWarning

# Test environment variables
env =
    ENVIRONMENT = testing
    DEBUG = false
    SECRET_KEY = test-secret-key-for-pytest
    DATABASE_URL = sqlite+aiosqlite:///./test_voice_analysis.db
    REDIS_URL = redis://localhost:6379/1
    AWS_ACCESS_KEY_ID = test-access-key
    AWS_SECRET_ACCESS_KEY = test-secret-key
    DATA_BUCKET = test-bucket
    CLOUD_DEPLOYMENT = false
    USE_TRANSFORMERS = false

# Coverage configuration
[coverage:run]
source = .
omit = 
    */tests/*
    */venv/*
    */env/*
    */.venv/*
    */site-packages/*
    */migrations/*
    */alembic/*
    setup.py
    conftest.py

[coverage:report]
# Regexes for lines to exclude from consideration
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

show_missing = True
skip_covered = False
precision = 2

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml